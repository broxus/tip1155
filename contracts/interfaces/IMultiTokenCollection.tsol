pragma ever-solidity >= 0.62.0;

interface IMultiTokenCollection {
    /// @notice Returns the MultiToken wallet code
    /// @return code Returns the MultiToken wallet code as TvmCell
    function multiTokenWalletCode(uint256 _id, bool _isEmpty) external view responsible returns (TvmCell code);

    /// @notice Returns the MultiToken wallet code hash
    /// @return codeHash Returns the MultiToken wallet code hash
    function multiTokenCodeHash(uint256 _id, bool _isEmpty) external view responsible returns (uint256 codeHash);

    /// @notice Computes MultiToken wallet address by unique MultiToken id and its owner
    /// @dev Return unique address for all Ids and owners. You find nothing by address for not a valid MultiToken wallet
    /// @param _id Unique MultiToken id
    /// @param _owner Address of MultiToken owner
    /// @return token Returns the address of MultiToken wallet contract
    function multiTokenWalletAddress(uint256 _id, address _owner) external view responsible returns (address token);

    /// @notice Destroys MultiTokenNft by its address
    /// @dev Only collection's owner can call
    /// @param _nft MultiTokenNft address to destroy
    /// @param _remainingGasTo Recipient of remaining gas
    /// @param _callbackTo Recipient of the final callback after destroy
    /// @param _callbackPayload Extra user-defined payload for callback
    function destroyNft(
        address _nft,
        address _remainingGasTo,
        address _callbackTo,
        TvmCell _callbackPayload
    ) external;

    /// @notice Mints 1155 tokens to recipient for specified MultiTokenNft
    /// @dev Only collection's owner can call
    /// @param _amount Amount of tokens to mint
    /// @param _nft MultiTokenNft address for tokens minting
    /// @param _recipient Final recipient of minted tokens
    /// @param _deployWalletValue Value to send for wallet deployment if the recipient doesn't have it
    /// @param _remainingGasTo Recipient of remaining gas
    /// @param _notify Whether or not notify recipient about mint
    /// @param _payload Extra user-defined payload for callback
    function mint(
        uint128 _amount,
        address _nft,
        address _recipient,
        uint128 _deployWalletValue,
        address _remainingGasTo,
        bool _notify,
        TvmCell _payload
    ) external;

    /// @notice Burns 1155 tokens from MultiTokenWallet for specified MultiTokenNft
    /// @dev Only collection's owner can call
    /// @param _amount Amount of tokens to burn
    /// @param _nft MultiTokenNft address for tokens burning
    /// @param _walletOwner Owner of the wallet for tokens burning
    /// @param _remainingGasTo Recipient of remaining gas
    /// @param _callbackTo Recipient of the final callback after burn
    /// @param _payload Extra user-defined payload for callback
    function burnTokens(
        uint128 _amount,
        address _nft,
        address _walletOwner,
        address _remainingGasTo,
        address _callbackTo,
        TvmCell _payload
    ) external;
}

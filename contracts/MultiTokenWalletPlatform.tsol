pragma ever-solidity >= 0.62.0;

import "./structures/IMultiTokenWalletPlatformData.tsol";

contract MultiTokenWalletPlatform {
    address static nft;
    address static owner;

    constructor(
        TvmCell _walletCode,
        TvmCell _extra,
        address _sender,
        address _remainingGasTo
    )
        public
        functionID(0x60903b64)
    {
        if (
            msg.sender == nft ||
            (_sender.value != 0 && _getExpectedAddress(_sender) == msg.sender)
        ) {
           _initialize(_walletCode, _extra, _remainingGasTo);
        } else {
            _remainingGasTo.transfer({
                value: 0,
                flag: 128 + 32,
                bounce: false
            });
        }
    }

    function _getExpectedAddress(address _owner) private view returns (address) {
        TvmCell stateInit = tvm.buildStateInit({
            contr: MultiTokenWalletPlatform,
            varInit: {
                nft: nft,
                owner: _owner
            },
            pubkey: 0,
            code: tvm.code()
        });

        return address(tvm.hash(stateInit));
    }

    function _initialize(
        TvmCell _walletCode,
        TvmCell _extra,
        address _remainingGasTo
    ) private {
        TvmCell data = abi.encode(
            IMultiTokenWalletPlatformData.MultiTokenWalletPlatformData({
                root: nft,
                owner: owner,
                platformCode: tvm.code(),
                extra: _extra,
                remainingGasTo: _remainingGasTo
            })
		);

        tvm.setcode(_walletCode);
        tvm.setCurrentCode(_walletCode);

        onCodeUpgrade(data);
    }

    function onCodeUpgrade(TvmCell _data) private {}
}

pragma ever-solidity >= 0.62.0;

pragma AbiHeader expire;
pragma AbiHeader time;
pragma AbiHeader pubkey;

import "./abstract/MultiTokenWalletBase.tsol";

contract MultiTokenWallet is MultiTokenWalletBase {
    constructor() public {
        revert();
    }

    function onDeployRetry(
        TvmCell /*_walletCode*/,
        TvmCell /*_extra*/,
        address _sender,
        address _remainingGasTo
    )
        external
        view
        functionID(0x60903b64)
    {
        require(msg.sender == root_ || address(tvm.hash(_buildWalletInitData(_sender))) == msg.sender);

        tvm.rawReserve(_reserve(), 0);

        if (_remainingGasTo.value != 0 && _remainingGasTo != address(this)) {
            _remainingGasTo.transfer({
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS,
                bounce: false
            });
        }
    }

    function onCodeUpgrade(TvmCell _data) private {
        tvm.rawReserve(_reserve(), 2);
        tvm.resetStorage();

		MultiTokenWalletPlatformData platformData = abi.decode(_data, MultiTokenWalletPlatformData);
        address remainingGasTo = platformData.remainingGasTo;

        _initWalletBase(platformData);

        if (remainingGasTo.value != 0 && remainingGasTo != address(this)) {
            remainingGasTo.transfer({
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS,
                bounce: false
            });
        }
    }
}

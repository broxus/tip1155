pragma ever-solidity >= 0.62.0;

import "@broxus/tip4/contracts/Collection.tsol";

import "../interfaces/IMultiTokenCollection.tsol";

import "../MultiTokenNft.tsol";

abstract contract MultiTokenCollectionBase is Collection, IMultiTokenCollection {
    TvmCell internal _platformCode;
    TvmCell internal _walletCode;

    function multiTokenWalletCode(uint256 _id, bool _isEmpty)
        external
        view
        override
        responsible
        returns (TvmCell)
    {
        return {
            value: 0,
            flag: MsgFlag.REMAINING_GAS,
            bounce: false
        } _buildMultiTokenWalletCode(_id, _isEmpty);
    }

    function multiTokenCodeHash(uint256 _id, bool _isEmpty)
        external
        view
        override
        responsible
        returns (uint256)
    {
        return {
            value: 0,
            flag: MsgFlag.REMAINING_GAS,
            bounce: false
        } tvm.hash(_buildMultiTokenWalletCode(_id, _isEmpty));
    }

    function multiTokenWalletAddress(uint256 _id, address _owner)
        external
        view
        override
        responsible
        returns (address)
    {
        return {
            value: 0,
            flag: MsgFlag.REMAINING_GAS,
            bounce: false
        } _resolveMultiTokenWallet(_id, _owner);
    }

    function _buildMultiTokenWalletCode(uint256 _nftId, bool _isEmpty)
        internal
        view
        returns (TvmCell)
    {
        TvmBuilder salt;

        salt.store(address(this));
        salt.store(_nftId);
        salt.store(_isEmpty);

        return tvm.setCodeSalt(_walletCode, salt.toCell());
    }

    function _buildMultiTokenPlatformCode(uint256 _nftId)
        internal
        view
        returns (TvmCell)
    {
        TvmBuilder salt;

        salt.store(address(this));
        salt.store(_nftId);

        return tvm.setCodeSalt(_platformCode, salt.toCell());
    }

    function _buildMultiTokenWalletState(uint256 _nftId, address _owner)
        internal
        view
        returns (TvmCell)
    {
        return tvm.buildStateInit({
            contr: MultiTokenWalletPlatform,
            varInit: {
                nft: _resolveNft(_nftId),
                owner: _owner
            },
            pubkey: 0,
            code: _buildMultiTokenPlatformCode(_nftId)
        });
    }

    function _resolveMultiTokenWallet(uint256 _nftId, address _owner)
        internal
        view
        returns (address)
    {
        return address(
            tvm.hash(
                _buildMultiTokenWalletState(_nftId, _owner)
            )
        );
    }

    function _mintNft(
        address _nftOwner,
        string _nftJson,
        uint128 _value,
        uint16 _flag
    ) internal override {
        uint256 id = _totalMinted;

        _totalMinted++;
        _totalSupply++;

        TvmCell codeNft = _buildNftCode(address(this));
        TvmCell stateNft = _buildNftState(codeNft, id);

        address nft = new MultiTokenNft{
            stateInit: stateNft,
            value: _value,
            flag: _flag
        }(
            _nftOwner,
            msg.sender,
            _remainOnNft,
            _nftJson,
            _codeIndex,
            _walletCode,
            _buildMultiTokenPlatformCode(id),
            0,
            "TIP-1155",
            "TIP-1155"
        );

        emit NftCreated({
            id: id,
            nft: nft,
            owner: _nftOwner,
            manager: address(this),
            creator: msg.sender
        });
    }
}

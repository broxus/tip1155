pragma ever-solidity >= 0.62.0;

import "@broxus/ever-contracts/contracts/libraries/MsgFlag.tsol";
import "@broxus/tip3/contracts/abstract/TokenWalletBurnableBase.tsol";
import "@broxus/tip3/contracts/abstract/TokenWalletBurnableByRootBase.tsol";
import "@broxus/tip3/contracts/abstract/TokenWalletDestroyableBase.tsol";
import "@broxus/tip3/contracts/additional/SID.tsol";

import "../interfaces/IMultiTokenWallet.tsol";
import "../libraries/MultiTokenGas.tsol";
import "../structures/IMultiTokenWalletPlatformData.tsol";

import "../MultiTokenWalletPlatform.tsol";

abstract contract MultiTokenWalletBase is
    TokenWalletBurnableBase,
    TokenWalletBurnableByRootBase,
    TokenWalletDestroyableBase,
    SID,
    IMultiTokenWallet,
    IMultiTokenWalletPlatformData
{
    uint256 internal _id;
    address internal _collection;

    TvmCell internal _platformCode;
    mapping(bytes4 => bool) internal _supportedInterfaces;

    function supportsInterface(bytes4 _interfaceID)
        external
        view
        override
        responsible
        returns (bool)
    {
        return {
            value: 0,
            flag: MsgFlag.REMAINING_GAS,
            bounce: false
        } _supportedInterfaces[_interfaceID];
    }

    function getInfo()
        external
        view
        override
        responsible
        returns (uint256 id, address collection)
    {
        return {
            value: 0,
            flag: MsgFlag.REMAINING_GAS,
            bounce: false
        } (_id, _collection);
    }

    function _targetBalance() internal pure override returns (uint128) {
        return MultiTokenGas.TARGET_WALLET_BALANCE;
    }

    function _initWalletBase(MultiTokenWalletPlatformData _platformData) internal {
        // Get collection and NFT id from salt
        (_collection, _id) = tvm.codeSalt(tvm.code())
            .get()
            .toSlice()
            .decode(address, uint256);

        _platformCode = _platformData.platformCode;

        // TIP-3
        root_ = _platformData.root;
        owner_ = _platformData.owner;
        balance_ = 0;

        // TIP-6
        _supportedInterfaces[bytes4(tvm.functionId(SID.supportsInterface))] = true;
        _supportedInterfaces[bytes4(tvm.functionId(IMultiTokenWallet.getInfo))] = true;
        _supportedInterfaces[bytes4(0x4f479fa3)] = true;    // TIP-3.1
        _supportedInterfaces[bytes4(0x2a4ac43e)] = true;    // TIP-3.2
        _supportedInterfaces[bytes4(0x562548ad)] = true;    // IBurnableTokenWallet
        _supportedInterfaces[bytes4(0x0c2ff20d)] = true;    // IBurnableByRootTokenWallet
        _supportedInterfaces[bytes4(0x0f0258aa)] = true;    // IDestroyable
    }

    function _buildWalletInitData(address _walletOwner)
        internal
        view
        override
        returns (TvmCell)
    {
        return tvm.buildStateInit({
            contr: MultiTokenWalletPlatform,
            varInit: {
                nft: root_,
                owner: _walletOwner
            },
            pubkey: 0,
            code: _platformCode
        });
    }

    function _transfer(
        uint128 _amount,
        address /*_recipientWallet*/,
        address /*_remainingGasTo*/,
        bool /*_notify*/,
        TvmCell /*_payload*/
    ) internal override {
        balance_ -= _amount;

        if (balance_ == 0) {
            _updateSalt(true);
        }
    }

    function _acceptTransfer(
        uint128 _amount,
        address /*_sender*/,
        address /*_senderWallet*/,
        address /*_remainingGasTo*/,
        bool /*_notify*/,
        TvmCell /*_payload*/
    ) internal override {
        balance_ += _amount;

        if (balance_ == _amount) {
            _updateSalt(false);
        }
    }

    function _mint(
        uint128 _amount,
        address /*_remainingGasTo*/,
        bool /*_notify*/,
        TvmCell /*_payload*/
    ) internal override {
        balance_ += _amount;

        if (balance_ == _amount) {
            _updateSalt(false);
        }
    }

    function _burn(
        uint128 _amount,
        address _remainingGasTo,
        address _callbackTo,
        TvmCell _payload
    ) internal override {
        require(_amount > 0, TokenErrors.WRONG_AMOUNT);
        require(_amount <= balance_, TokenErrors.NOT_ENOUGH_BALANCE);

        tvm.rawReserve(_reserve(), 0);

        balance_ -= _amount;

        if (balance_ == 0) {
            _updateSalt(true);
        }

        ITokenRoot(root_)
            .acceptBurn{
                value: 0,
                flag: TokenMsgFlag.ALL_NOT_RESERVED,
                bounce: true
            }(
                _amount,
                owner_,
                _remainingGasTo,
                _callbackTo,
                _payload
            );
    }

    function _transferBounce(
        uint128 _amount,
        address /*_revertedFrom*/
    ) internal override {
        balance_ += _amount;

        if (balance_ == _amount) {
            _updateSalt(false);
        }
    }

    function _updateSalt(bool _isEmpty) view internal {
        TvmBuilder salt;

        salt.store(_collection);
        salt.store(_id);
        salt.store(_isEmpty);

        TvmCell newCode = tvm.setCodeSalt(tvm.code(), salt.toCell());

        tvm.setcode(newCode);
        tvm.setCurrentCode(newCode);
    }

    function _deployWallet(
        TvmCell _initData,
        uint128 _deployWalletValue,
        address _remainingGasTo
    )
        internal
        view
        override
        returns (address)
    {
        TvmCell empty;

        return new MultiTokenWalletPlatform{
            stateInit: _initData,
            value: _deployWalletValue,
            wid: address(this).wid,
            flag: MsgFlag.SENDER_PAYS_FEES
        }(
            tvm.code(),
            empty,
            owner_,
            _remainingGasTo
        );
    }
}

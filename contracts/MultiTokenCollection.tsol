pragma ever-solidity >= 0.62.0;

pragma AbiHeader expire;
pragma AbiHeader time;
pragma AbiHeader pubkey;

import "@broxus/tip3/contracts/interfaces/ITokenRoot.tsol";
import "@broxus/tip3/contracts/interfaces/IBurnableByRootTokenRoot.tsol";
import "@broxus/tip4/contracts/Nft.tsol";

import "./abstract/MultiTokenCollectionBase.tsol";

contract MultiTokenCollection is MultiTokenCollectionBase {
    constructor(
        TvmCell _initialPlatformCode,
        TvmCell _initialWalletCode,
        TvmCell _initialNftCode,
        TvmCell _initialIndexCode,
        TvmCell _initialIndexBasisCode,
        address _initialOwner,
        string _initialJson,
        address _remainingGasTo
    ) Collection (
        _initialNftCode,
        _initialIndexCode,
        _initialIndexBasisCode,
        _initialOwner,
        MultiTokenGas.TARGET_NFT_BALANCE,
        _initialJson
    ) public {
        // Set platform and wallet codes for MultiTokenWallet
        _platformCode = _initialPlatformCode;
        _walletCode = _initialWalletCode;

        // TIP-1155 collection
        _supportedInterfaces[
            bytes4(tvm.functionId(IMultiTokenCollection.multiTokenWalletCode)) ^
            bytes4(tvm.functionId(IMultiTokenCollection.multiTokenCodeHash)) ^
            bytes4(tvm.functionId(IMultiTokenCollection.multiTokenWalletAddress)) ^
            bytes4(tvm.functionId(IMultiTokenCollection.destroyNft)) ^
            bytes4(tvm.functionId(IMultiTokenCollection.mint)) ^
            bytes4(tvm.functionId(IMultiTokenCollection.burnTokens))
        ] = true;

        // Refund remaining gas
        if (_remainingGasTo.value != 0) {
            _remainingGasTo.transfer({
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS,
                bounce: false
            });
        }
    }

    function destroyNft(
        address _nft,
        address _remainingGasTo,
        address _callbackTo,
        TvmCell _callbackPayload
    ) external override onlyOwner {
        Nft(_nft)
            .burn{
                value: 0,
                flag: MsgFlag.REMAINING_GAS,
                bounce: false
            }(
                _remainingGasTo,
                _callbackTo,
                _callbackPayload
            );
    }

    function mint(
        uint128 _amount,
        address _nft,
        address _recipient,
        uint128 _deployWalletValue,
        address _remainingGasTo,
        bool _notify,
        TvmCell _payload
    ) external override onlyOwner {
        ITokenRoot(_nft)
            .mint{
                value: 0,
                flag: MsgFlag.REMAINING_GAS,
                bounce: false
            }(
                _amount,
                _recipient,
                _deployWalletValue,
                _remainingGasTo,
                _notify,
                _payload
            );
    }

    function burnTokens(
        uint128 _amount,
        address _nft,
        address _walletOwner,
        address _remainingGasTo,
        address _callbackTo,
        TvmCell _payload
    ) external override onlyOwner {
        IBurnableByRootTokenRoot(_nft)
            .burnTokens{
                value: 0,
                flag: MsgFlag.REMAINING_GAS,
                bounce: false
            }(
                _amount,
                _walletOwner,
                _remainingGasTo,
                _callbackTo,
                _payload
            );
    }
}
